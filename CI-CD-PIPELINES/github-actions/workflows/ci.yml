name: üöÄ CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: üîç Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier
        run: npm run format -- --check

  test-backend:
    name: üß™ Test Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

  test-ai-engine:
    name: üß† Test AI Engine
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd AI-ML-DEEP-LEARNING-ENGINE
          pip install -r requirements.txt

      - name: Run Python tests
        run: |
          cd AI-ML-DEEP-LEARNING-ENGINE
          pytest

  build:
    name: üî® Build
    runs-on: ubuntu-latest
    needs: [lint, test-backend, test-ai-engine]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build:frontend

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            FRONTEND-ECOSYSTEM/ai-powered-ui/dist
            BACKEND-MICROSERVICES-ECOSYSTEM/*/dist

  docker-build:
    name: üê≥ Build Docker Images
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push AI Engine
        uses: docker/build-push-action@v5
        with:
          context: ./AI-ML-DEEP-LEARNING-ENGINE
          file: ./INFRASTRUCTURE-AS-CODE/docker/Dockerfile.ai-engine
          push: true
          tags: ghcr.io/${{ github.repository }}/ai-engine:latest

      - name: Build and push API Gateway
        uses: docker/build-push-action@v5
        with:
          context: ./BACKEND-MICROSERVICES-ECOSYSTEM/api-gateway-service
          file: ./INFRASTRUCTURE-AS-CODE/docker/Dockerfile.backend
          push: true
          tags: ghcr.io/${{ github.repository }}/api-gateway:latest

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./FRONTEND-ECOSYSTEM/ai-powered-ui
          file: ./INFRASTRUCTURE-AS-CODE/docker/Dockerfile.frontend
          push: true
          tags: ghcr.io/${{ github.repository }}/frontend:latest